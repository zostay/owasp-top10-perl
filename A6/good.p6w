#!/usr/bin/env smackup
use v6;

use Crypt::Bcrypt;
use Crypt::AES; # doesn't exist

# Very official storage things
my %passwords;
my %credit_cards;

# Very official production application secret
#
# WARNING: Don't actually use this key and do not actually keep your key
# stored in your code. Preferably, the key used should be encrypted by another
# key and stored on a separate file system, which is protected by a passphrase
# which requires at least two DevOps/SysOps to enter during application start
# up.
#
my $PROD_SECRET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123';

sub app(%env) {
    my %session := %env<p6w.session>;
    my %params   = %env<p6w.input>.reduce({ $^a ~ $^b }).decode('UTF-8')\
                                  .split('&')».split('=').flat; # naïve

    return 403, [ 'Content-type' => 'text/plain' ], [ 'This connection is not secure.' ]
        unless %env<p6w.url-scheme> eq 'https';

    return 403, [ Content-type => 'text/plain' ], [ 'You are not authorized. Go away.' ]
        unless %params<authorized-user>;

    my $name     = %params<name>;
    $name ~~ /^ <[ a..z A..Z ]>+ $/
        or return 400, [ Content-type => 'text/plain' ], [ 'That name is illegal.' ];

    my $password = %params<password>;

    # Storing passwords with Bcrypt using all the rounds!
    %passwords{ $name } = bcrypt-hash($password, :18rounds);

    my $cc_number = %env<credit-card-number>;
    $cc_number =~ /^ <[ 0..9 ]> ** 15..16 $/
        or return 400, [ Content-type => 'text/plain' ], [ 'That cannot possibly be a VISA or American Express.' ];

    # Storing credit card numbers in cipher text
    my $cipher = Crypt::AES.new($PROD_SECRET, Crypt::AES::CBCMode);
    %credit_cards{ $name } = $cipher.encrypt($cc_number);

    200, [ Content-type => 'text/plain' ], [ 'Account and payment information updated.' ];
}

# vim: ft=perl6 ts=4 sw=4 sts=4
